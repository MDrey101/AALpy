The goal is to design an ONFSM where the state which has the additional output (nondeterminism) is visited as much as possible
When both inputs are the same the probability of which path is taken is distributed uniform

states[0].transitions['a'].append(('A', states[1]))
states[0].transitions['b'].append(('B', states[0]))

states[1].transitions['a'].append(('A', states[2]))
states[1].transitions['a'].append(('AB', states[0]))
states[1].transitions['b'].append(('B', states[1]))

states[2].transitions['a'].append(('A', states[3]))
states[2].transitions['b'].append(('B', states[2]))
states[2].transitions['b'].append(('AB', states[1]))

states[3].transitions['a'].append(('AB', states[0]))
states[3].transitions['b'].append(('B', states[1]))

'''
-----------------------------------------------------
'''

states[0].transitions['a'].append(('A', states[1]))
states[0].transitions['b'].append(('B', states[0]))
states[0].transitions['c'].append(('B', states[0]))

states[1].transitions['a'].append(('A', states[2]))
states[1].transitions['a'].append(('AB', states[0]))
states[1].transitions['b'].append(('B', states[1]))
states[1].transitions['c'].append(('C', states[3]))

states[2].transitions['a'].append(('A', states[3]))
states[2].transitions['b'].append(('B', states[2]))
states[2].transitions['b'].append(('AB', states[1]))
states[2].transitions['c'].append(('C', states[0]))

states[3].transitions['a'].append(('AB', states[0]))
states[3].transitions['b'].append(('B', states[1]))
states[3].transitions['c'].append(('C', states[2]))

-------------------------------------------------------------

states[0].transitions['a'].append(('A', states[1]))
states[0].transitions['b'].append(('A', states[2]))

states[1].transitions['a'].append(('A', states[3]))
states[1].transitions['b'].append(('B', states[0]))
states[1].transitions['a'].append(('AB', states[4]))

states[2].transitions['a'].append(('A', states[3]))
states[2].transitions['b'].append(('B', states[0]))

states[3].transitions['a'].append(('A', states[4]))
states[3].transitions['b'].append(('B', states[0]))

states[4].transitions['a'].append(('A', states[0]))
states[4].transitions['b'].append(('B', states[3]))
states[4].transitions['a'].append(('AB', states[4]))

Starting learning with an all-weather assumption.
See run_Lstar_ONFSM documentation for more details about possible non-convergence.
--------------------------------------
Prefixes / E set |('a',)      |('b',)
--------------------------------------
((), ())         |{'A'}       |{'A'}
======================================
--------------------------------------
(('a',), ('A',)) |{'AB', 'A'} |{'B'}
--------------------------------------
(('b',), ('A',)) |{'A'}       |{'B'}
--------------------------------------
row_to_close  (('a',), ('A',))
Hypothesis 1: 3 states.
-----------------------------------------------
Prefixes / E set          |('a',)      |('b',)
-----------------------------------------------
((), ())                  |{'A'}       |{'A'}
-----------------------------------------------
(('a',), ('A',))          |{'AB', 'A'} |{'B'}
-----------------------------------------------
(('b',), ('A',))          |{'A'}       |{'B'}
===============================================
-----------------------------------------------
(('a', 'a'), ('A', 'AB')) |{'AB', 'A'} |{'B'}
-----------------------------------------------
(('a', 'a'), ('A', 'A'))  |{'A'}       |{'B'}
-----------------------------------------------
(('a', 'b'), ('A', 'B'))  |{'A'}       |{'A'}
-----------------------------------------------
(('b', 'a'), ('A', 'A'))  |{'A'}       |{'B'}
-----------------------------------------------
(('b', 'b'), ('A', 'B'))  |{'A'}       |{'A'}
-----------------------------------------------
Counterexample (['a', 'a', 'a', 'b'], ['A', 'AB', 'A', 'A'])
added_suffixes  [('a', 'b')]
row_to_close  (('a', 'a'), ('A', 'AB'))
Hypothesis 2: 4 states.
-------------------------------------------------------------------------------------
Prefixes / E set                     |('a',)      |('b',) |('a', 'b')
-------------------------------------------------------------------------------------
((), ())                             |{'A'}       |{'A'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('a',), ('A',))                     |{'AB', 'A'} |{'B'}  |{('AB', 'B'), ('A', 'B')}
-------------------------------------------------------------------------------------
(('b',), ('A',))                     |{'A'}       |{'B'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('a', 'a'), ('A', 'AB'))            |{'AB', 'A'} |{'B'}  |{('A', 'A'), ('AB', 'B')}
=====================================================================================
-------------------------------------------------------------------------------------
(('a', 'a'), ('A', 'A'))             |{'A'}       |{'B'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('a', 'b'), ('A', 'B'))             |{'A'}       |{'A'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('b', 'a'), ('A', 'A'))             |{'A'}       |{'B'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('b', 'b'), ('A', 'B'))             |{'A'}       |{'A'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('a', 'a', 'a'), ('A', 'AB', 'AB')) |{'AB', 'A'} |{'B'}  |{('A', 'A'), ('AB', 'B')}
-------------------------------------------------------------------------------------
(('a', 'a', 'a'), ('A', 'AB', 'A'))  |{'A'}       |{'A'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
(('a', 'a', 'b'), ('A', 'AB', 'B'))  |{'A'}       |{'B'}  |{('A', 'B')}
-------------------------------------------------------------------------------------
Counterexample (['a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'], ['A', 'B', 'A', 'AB', 'B', 'B', 'A', 'AB', 'A', 'A', 'B', 'A', 'A', 'A', 'AB'])
added_suffixes  [('a', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'), ('a', 'b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'), ('b', 'b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'), ('b', 'a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'), ('a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'), ('a', 'a', 'b', 'b', 'a', 'a', 'a', 'a'), ('a', 'b', 'b', 'a', 'a', 'a', 'a'), ('b', 'b', 'a', 'a', 'a', 'a'), ('b', 'a', 'a', 'a', 'a'), ('a', 'a', 'a', 'a'), ('a', 'a', 'a'), ('a', 'a')]
row_to_close  (('a', 'a'), ('A', 'A'))






states[0].transitions['a'].append(('AB', states[1]))
states[0].transitions['b'].append(('B', states[2]))

states[1].transitions['a'].append(('A', states[3]))
states[1].transitions['a'].append(('A', states[3]))
states[1].transitions['a'].append(('A', states[3]))
states[1].transitions['a'].append(('A', states[3]))
states[1].transitions['b'].append(('B', states[1]))
states[1].transitions['a'].append(('AB', states[0]))

states[2].transitions['a'].append(('A', states[1]))
states[2].transitions['b'].append(('B', states[2]))
states[2].transitions['b'].append(('AB', states[0]))

states[3].transitions['a'].append(('A', states[2]))
states[3].transitions['b'].append(('AB', states[0]))





Starting learning with an all-weather assumption.
See run_Lstar_ONFSM documentation for more details about possible non-convergence.
---------------------------------------
Prefixes / E set  |('a',) |('b',)
---------------------------------------
((), ())          |{'AB'} |{'B'}
=======================================
---------------------------------------
(('a',), ('AB',)) |{'A'}  |{'B'}
---------------------------------------
(('b',), ('B',))  |{'A'}  |{'B', 'AB'}
---------------------------------------
row_to_close  (('a',), ('AB',))
Hypothesis 1: 5 states.
---------------------------------------------------------------
Prefixes / E set                     |('a',)      |('b',)
---------------------------------------------------------------
((), ())                             |{'AB'}      |{'B'}
---------------------------------------------------------------
(('a',), ('AB',))                    |{'A'}       |{'B'}
---------------------------------------------------------------
(('b',), ('B',))                     |{'A'}       |{'B', 'AB'}
---------------------------------------------------------------
(('a', 'a'), ('AB', 'A'))            |{'A'}       |{'AB'}
---------------------------------------------------------------
(('a', 'b'), ('AB', 'B'))            |{'A', 'AB'} |{'B'}
===============================================================
---------------------------------------------------------------
(('b', 'a'), ('B', 'A'))             |{'A', 'AB'} |{'B'}
---------------------------------------------------------------
(('b', 'b'), ('B', 'B'))             |{'A'}       |{'B', 'AB'}
---------------------------------------------------------------
(('b', 'b'), ('B', 'AB'))            |{'AB'}      |{'B'}
---------------------------------------------------------------
(('a', 'a', 'a'), ('AB', 'A', 'A'))  |{'A'}       |{'B', 'AB'}
---------------------------------------------------------------
(('a', 'a', 'b'), ('AB', 'A', 'AB')) |{'AB'}      |{'B'}
---------------------------------------------------------------
(('a', 'b', 'a'), ('AB', 'B', 'A'))  |{'A'}       |{'AB'}
---------------------------------------------------------------
(('a', 'b', 'a'), ('AB', 'B', 'AB')) |{'AB'}      |{'B'}
---------------------------------------------------------------
(('a', 'b', 'b'), ('AB', 'B', 'B'))  |{'A', 'AB'} |{'B'}
---------------------------------------------------------------
Counterexample (['b', 'a', 'b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a'], ['B', 'A', 'B', 'B', 'B', 'B', 'A', 'A', 'A', 'A', 'AB', 'AB', 'AB'])
added_suffixes  [('b', 'b', 'b', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a'), ('b', 'b', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a'), ('b', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a'), ('b', 'a', 'a', 'a', 'a', 'b', 'a', 'a'), ('a', 'a', 'a', 'a', 'b', 'a', 'a'), ('a', 'a', 'a', 'b', 'a', 'a'), ('a', 'a', 'b', 'a', 'a'), ('a', 'b', 'a', 'a'), ('b', 'a', 'a'), ('a', 'a')]
row_to_close  (('b', 'a'), ('B', 'A'))

